const path = require('path');
const webpack = require('webpack');
const CopyWebpackPlugin = require("copy-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const RemovePlugin = require('remove-files-webpack-plugin');
const ZipPlugin = require('zip-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const ExtensionReloader  = require('webpack-extension-reloader');

const ENVIRONMENT = process.env.NODE_ENV || "development";
const IS_PRODUCTION = (ENVIRONMENT === "production");
// chrome or firefox
const PLATFORM = process.env.MX_PLATFORM;

// PLATFORM_ID is only used in production environment.
//   - on Firefox, platform id is extension's id (generated by AMO).
//   - on Chrome, platform id is the public key (generated by Chrome Webstore).
const PLATFORM_ID = process.env.MX_PLATFORM_ID;

const pkg = require('./package.json');

const ASSET_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'eot', 'otf', 'svg', 'ttf', 'woff', 'woff2'];

const manifest_filename = path.join(__dirname, "src", "manifest.json");
const pages_folder = path.join(__dirname, "src", "pages");
const dist_folder = path.join(__dirname, "dist", "extension", "maoxian-web-clipper");

const pages = [
  'popup', 'welcome', 'history', 'home', 'last-clipping-result',
  'plan-subscription', 'reset-history', 'setting', 'support',
  'ui-control', 'ui-selection', 'failed-tasks', 'debug']

const pageEntires = pages.reduce((entries, pageName) => {
  entries[pageName] = path.join(pages_folder, pageName + ".js")
  return entries;
}, {})

// https://github.com/jantimon/html-webpack-plugin/issues/1396
// https://github.com/DanielRuf/html-minifier-terser#options-quick-reference
let minify = false;
if (IS_PRODUCTION) {
  minify = {
    collapseWhitespace: true,
    removeComments: true,
    removeRedundantAttributes: false,
    removeScriptTypeAttributes: true,
    removeStyleLinkTypeAttributes: true,
    useShortDoctype: true
  }
}

const pageHtmls = pages.reduce((htmls, pageName) => {
  htmls.push(
    new HtmlWebpackPlugin({
      template: path.join(pages_folder, pageName + ".html"),
      filename: `pages/${pageName}.html`,
      chunks: [pageName],
      minify: minify
    })
  )
  return htmls;
}, [])

const config = {
  mode: ENVIRONMENT,
  entry: {
    'content-frame': path.join(__dirname, "src", "js", "content-frame.js"),
    'content': path.join(__dirname, "src", "js", "content.js"),
    'background': path.join(__dirname, "src", "js", "background.js"),
    ...pageEntires
  },
  output: {
    filename: "js/[name].js",
    path: dist_folder
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /(node_modules|bower_components)/,
        use: [
          {
            loader: 'babel-loader',
            options: {
              presets: ['@babel/preset-env'],
              plugins: [
                '@babel/plugin-transform-regenerator',
                "@babel/plugin-transform-runtime"]
            }
          }
        ]
      },
      {
        test: /\.html$/,
        use: [
          // This is necessary to ignore template syntax
          'raw-loader'
        ]
      },
      {
        test: /\.css$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader',
        ]
      },
      {
        test: new RegExp('\.(' + ASSET_EXTENSIONS.join('|') + ')$'),
        use: [
          'file-loader?outputPath=assets'
        ]
      },
    ]
  },
  plugins: [
    new webpack.DefinePlugin({
      COMPILING_VAR_IS_PRODUCTION: IS_PRODUCTION
    }),
    new webpack.ProvidePlugin({
      // Workaround for https://github.com/webpack/webpack/issues/5828
      'browser': "imports-loader?browser=>undefined!webextension-polyfill"
    }),
    new CopyWebpackPlugin([
      { from: 'src/_locales/en',    to: path.join(dist_folder, '_locales/en') },
      { from: 'src/_locales/zh-CN', to: path.join(dist_folder, '_locales/zh-CN') },
      { from: 'src/icons',          to: path.join(dist_folder, 'icons')}
    ], { copyUnmodified: true }),
    new MiniCssExtractPlugin({
      filename: 'css/[name].[hash].css'
    }),
    new HtmlWebpackPlugin({
      template: path.join(pages_folder, "background.html"),
      filename: "pages/background.html",
      chunks: ["background"]
    }),
    // Inset all page htmls
    ...pageHtmls
  ],
}



function renderManifest(content, path) {
  let manifest = JSON.parse(content.toString());
  manifest = assignMetaInfoFromPkg(manifest, pkg);
  return Buffer.from(JSON.stringify(manifest, null, 2));
}

function renderManifestWithPlatformMsg(content, path) {
  let manifest = JSON.parse(content.toString());
  manifest = assignMetaInfoFromPkg(manifest, pkg);
  switch(PLATFORM) {
    case 'chrome':
      manifest.key = PLATFORM_ID;  // Public key
      break;
    case 'firefox':
      manifest.applications = {
        gecko: {id: PLATFORM_ID}   // Extension id
      }
      break;
    default: break;
  }
  return Buffer.from(JSON.stringify(manifest, null, 2));
}

function assignMetaInfoFromPkg(manifest, pkg) {
  manifest.author = pkg.author;
  manifest.version = pkg.version;
  manifest.browser_action.default_title = pkg.name;
  return manifest;
}


if (IS_PRODUCTION) {
  config.plugins.push(new CopyWebpackPlugin([
    { from: "src/manifest.json", transform: renderManifestWithPlatformMsg }
  ], { copyUnmodified: true }));

  const zipfile = `${pkg.name}-${PLATFORM}-${pkg.version}.zip`
  config.plugins.push(
    // Clean dist/extension/maoxian-web-clipper before every build.
    new CleanWebpackPlugin(),
    // Remove last zip files
    new RemovePlugin({
      before: {
        root: path.resolve('dist', 'extension'),
        include: [
          zipfile
        ]
      }
    }),
    // Compress dist/extension/maoxian-web-clipper
    // Both .xpi and .crx are zip file, so we only need to create one file
    new ZipPlugin({
      // Relative to Webpack output path
      path: '../',
      filename: zipfile,
    })
  );
} else if (ENVIRONMENT == "development") {
  config.plugins.push(new CopyWebpackPlugin([
    { from: "src/manifest.json", transform: renderManifest }
  ], { copyUnmodified: true }));

  config.plugins.push(
    new ExtensionReloader({
      port: 9090,
      reloadPage: true,
      entries: {
        contentScript: ['content', 'content-frame'],
        background: 'background',
        extensionPage: 'popup',
      }
    }),
  );
  config.devtool = 'inline-source-map';
}

module.exports = config
